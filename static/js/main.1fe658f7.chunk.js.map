{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/App.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","redux/actions/contactActions.js","redux/selectors/contactAsync.js","redux/selectors/contactSelectors.js","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Loader/Loader.js","components/App.js","redux/reducers/contactReducers.js","redux/store/index.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","onRename","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","contact","toLowerCase","includes","getLoading","loading","getContactById","contactId","find","ContactForm","handleChange","e","target","value","setState","handleChangeForNumber","Number","isNaN","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","resetForm","handleSubmit","preventDefault","props","some","length","onAddContact","this","className","classes","container","onSubmit","form","type","inputText","placeholder","onChange","Button","variant","size","block","onClick","Component","mapDispatchToProps","contactAsync","connect","contactSelectors","ownProps","onDeleteContact","contactsAsync","map","li","key","alert","formFilter","App","color","height","width","timeout","React","onFetchContacts","isLoadingTasks","titleName","minTitleName","createReducer","action","payload","combineReducers","globalState","configureStore","reducer","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.1fe658f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"ContactForm_inputText__3spno\",\"button\":\"ContactForm_button__hc6ve\",\"container\":\"ContactForm_container__1FUwh\",\"form\":\"ContactForm_form__2jLxQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleName\":\"App_titleName__3OjSH\",\"minTitleName\":\"App_minTitleName__3J1HG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__1SK1M\",\"li\":\"ContactList_li__1wTbi\",\"alert\":\"ContactList_alert__3fHCk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3W-1j\",\"formFilter\":\"Filter_formFilter__3YrtZ\",\"form\":\"Filter_form__3YtsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contact_button__2seTK\",\"toAddButton\":\"Contact_toAddButton__3IDyj\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst deleteContactRequest = createAction(\"contacts/removeRequest\");\r\nconst deleteContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst deleteContactError = createAction(\"contacts/removeError\");\r\n\r\nconst onRename = createAction(\"contacts/onRename\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  onRename,\r\n};\r\n","import axios from \"axios\";\r\nimport contactsActions from \"../actions/contactActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000\";\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", { name, number })\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.addContactSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(contactsActions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase(filter))\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n  return contacts.find((contact) => contact.id === contactId);\r\n};\r\n\r\nexport default {\r\n  getContacts,\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getContactById,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactAsync from \"../../redux/selectors/contactAsync\";\r\nimport contactSelectors from \"../../redux/selectors/contactSelectors\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleChangeForNumber = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    if (Number.isNaN(Number(value))) {\r\n      toast.error(`Введите пожалуйста цифры`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n  resetForm = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isOldContact = this.props.contacts.some(\r\n      (state) => state.name.toLowerCase() === this.state.name.toLowerCase()\r\n    );\r\n\r\n    if (isOldContact) {\r\n      toast.error(`Данный контакт уже есть!`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else if (this.state.name === \"\" && this.state.number === \"\") {\r\n      toast.error(`Введено пустое значение!`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else if (this.state.name.length < 3) {\r\n      toast.error(`Введено слишком короткое имя! Не меньше 3 символов`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else if (this.state.name.length > 40) {\r\n      toast.error(`Введено слишком длинное имя! Не больше 40 символов`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else if (this.state.number.length < 6) {\r\n      toast.error(`Введен слишком короткий номер телефона! Не меньше 6 цифр`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else if (this.state.number.length > 12) {\r\n      toast.error(`Введен слишком длинный номер телефона! Не больше 12 цифр`, {\r\n        position: \"top-right\",\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    } else {\r\n      this.props.onAddContact(this.state.name, this.state.number);\r\n    }\r\n    this.resetForm();\r\n  };\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div className={classes.container}>\r\n        <form onSubmit={this.handleSubmit} className={classes.form}>\r\n          <label>\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id={name}\r\n              className={classes.inputText}\r\n              placeholder=\"Input name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              id={number}\r\n              className={classes.inputText}\r\n              placeholder=\"Input phone number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChangeForNumber}\r\n            />\r\n          </label>\r\n          <ToastContainer />\r\n          <Button variant=\"primary\" type=\"submit\" size=\"lg\" block>\r\n            Add Contact\r\n          </Button>\r\n          <Button\r\n            variant=\"success\"\r\n            type=\"button\"\r\n            onClick={this.resetForm}\r\n            size=\"lg\"\r\n            block\r\n          >\r\n            Reset\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactAsync.addContact,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Contact.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport contactsAsync from \"../../redux/selectors/contactAsync\";\r\nimport contactSelectors from \"../../redux/selectors/contactSelectors\";\r\n\r\nconst Contact = ({ name, number, onDeleteContact }) => {\r\n  return (\r\n    <>\r\n      <p>{name}</p> <p>{number}</p>\r\n      <Button onClick={onDeleteContact} variant=\"danger\">\r\n        X\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = contactSelectors.getContactById(state, ownProps.id);\r\n  return {\r\n    ...contact,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onDeleteContact: () => dispatch(contactsAsync.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);\r\n","import React from \"react\";\r\nimport Contact from \"../Contact/\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./ContactList.module.css\";\r\nimport contactSelectors from \"../../redux/selectors/contactSelectors\";\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <div className={classes.container}>\r\n    <ul>\r\n      {contacts.length > 0 ? (\r\n        contacts.map(({ id }) => (\r\n          <li className={classes.li} key={id}>\r\n            <Contact id={id} />\r\n          </li>\r\n        ))\r\n      ) : (\r\n        <li className={classes.alert}>No have contacts!</li>\r\n      )}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/actions/contactActions\";\r\nimport contactSelectors from \"../../redux/selectors/contactSelectors\";\r\nimport classes from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onRename }) => {\r\n  return (\r\n    <>\r\n      <div className={classes.container}>\r\n        <form>\r\n          <label>Find contacts by name</label>\r\n          <input\r\n            className={classes.formFilter}\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={(e) => onRename(e.target.value)}\r\n          />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onRename: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onRename: contactsActions.onRename,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\n\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./Loader.scss\";\r\n\r\nexport default class App extends React.Component {\r\n  //other logic\r\n  render() {\r\n    return (\r\n      <div className=\"loaderContainer\">\r\n        <Loader\r\n          type=\"Circles\"\r\n          color=\"#00BFFF\"\r\n          height={80}\r\n          width={80}\r\n          timeout={1000}\r\n        />\r\n        <p className=\"loading-text\">Loading</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import classes from \"./App.module.css\";\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactForm from \"./ContactForm/\";\nimport ContactList from \"./ContactList/\";\nimport Filter from \"./Filter/\";\nimport Loader from \"./Loader/\";\nimport contactAsync from \"../redux/selectors/contactAsync\";\nimport contactSelectors from \"../redux/selectors/contactSelectors\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n  render() {\n    return (\n      <>\n        {this.props.isLoadingTasks && <Loader />}\n        <h1 className={classes.titleName}>Phonebook</h1>\n\n        <ContactForm />\n        <h2 className={classes.minTitleName}>Contacts</h2>\n        <Filter />\n        <h2 className={classes.minTitleName}>Contacts List</h2>\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingTasks: contactSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactAsync.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"../actions/contactActions\";\r\n\r\nconst addContact = (state, action) => [...state, action.payload];\r\nconst deleteContact = (state, action) =>\r\n  state.filter((contact) => contact.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.deleteContactSuccess]: deleteContact,\r\n});\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.onRename]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.deleteContactRequest]: () => true,\r\n  [contactsActions.deleteContactSuccess]: () => false,\r\n  [contactsActions.deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"../reducers/contactReducers\";\r\n\r\nconst globalState = configureStore({\r\n  reducer: {\r\n    contacts: rootReducer,\r\n  },\r\n});\r\n\r\nexport default globalState;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport globalState from \"./redux/store/\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={globalState}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}